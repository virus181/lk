<?php

namespace app\models;

use app\api\models\Calculator;
use app\delivery\DeliveryHelper;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "{{%tariff}}".
 *
 * @property int $id
 * @property int $shop_id
 * @property string $type
 * @property string $carrier_key
 * @property int $additional_sum
 * @property string $additional_sum_type
 * @property string $additional_sum_prefix
 * @property int $total
 * @property string $city
 * @property string $city_fias_id
 * @property int $min_price
 * @property int $max_price
 * @property int $min_weight
 * @property int $max_weight
 * @property int $created_at
 * @property int $updated_at
 */
class Tariff extends ActiveRecord
{

    const TARIFF_TYPE_PERCENT = 'p';
    const TARIFF_TYPE_FIXED = 'f';

    const TARIFF_PREFIX_UP = '+';
    const TARIFF_PREFIX_DOWN = '-';

    public $detailed;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%tariff}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return array(
            TimestampBehavior::className(),
        );
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        $rules = [
            [['min_price', 'max_price', 'min_weight', 'max_weight', 'additional_sum', 'total'], 'number'],
            [['type', 'carrier_key', 'city', 'city_fias_id'], 'string', 'max' => 255],
            [['additional_sum_type', 'additional_sum_prefix'], 'string', 'max' => 1],
            [['shop_id'], 'required'],
        ];

        return $rules;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'carrier_key' => Yii::t('app', 'Carrier Key'),
            'type' => Yii::t('app', 'Delivery method'),
            'total' => Yii::t('app', 'Delivery cost'),
            'additional_sum_type' => Yii::t('app', 'Additional sum type'),
            'additional_sum_prefix' => Yii::t('app', 'Additional sum prefix'),
            'additional_sum' => Yii::t('app', 'Additional sum'),
            'city' => Yii::t('app', 'City'),
            'guid' => Yii::t('app', 'Locality'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getShop()
    {
        return $this->hasOne(Shop::className(), ['id' => 'shop_id']);
    }

    /**
     * Получение финальной стоимости доставки с учетом округления
     *
     * @param float $cost
     * @param $rounding_off
     * @param int|null $rounding_off_prefix
     * @return float
     */
    public static function getRoundedDeliveryCost(float $cost, $rounding_off, $rounding_off_prefix = null)
    {
        if ($rounding_off_prefix === 1) {
            return ceil($cost / $rounding_off) * $rounding_off;
        }

        if ($rounding_off_prefix === -1) {
            return floor($cost / $rounding_off) * $rounding_off;
        }

        return $cost;
    }

    /**
     * @param $shopId
     * @param int $cache
     * @return array|ActiveRecord[]
     */
    public static function getTariff($shopId, $cache = 3600)
    {
        if ($cache === false) {
            return self::getShopTariff($shopId);
        } else {
            return Yii::$app->cache->getOrSet('tariff_' . $shopId, function () use ($shopId) {
                return self::getShopTariff($shopId);
            }, $cache);
        }
    }

    /**
     * @param $shopId
     * @return array|ActiveRecord[]
     */
    public static function getShopTariff($shopId)
    {
        return Tariff::find()->where(['shop_id' => $shopId])->asArray()->all();
    }

    public function afterSave($insert, $changedAttributes)
    {
        Yii::$app->cache->delete('shopTariff_' . $this->shop_id);
        Yii::$app->cache->delete('tariff_' . $this->shop_id);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Получение тарифов для магазина
     * @param int $shopId
     * @param int $cache
     * @return array|null
     */
    public static function getTariffs(int $shopId, $cache = 3600)
    {
        return Yii::$app->cache->getOrSet('shopTariff_' . $shopId, function () use ($shopId) {
            return Tariff::find()->where(['shop_id' => $shopId])->all();
        }, $cache);
    }

    /**
     * Детальный ли вид настройки тарифа
     * @param Tariff $tariff
     * @return bool
     */
    public static function isDetailed(Tariff $tariff): bool
    {
        if ($tariff->additional_sum
            || $tariff->additional_sum_prefix
            || $tariff->additional_sum_type
            || $tariff->city_fias_id
            || $tariff->min_price
            || $tariff->max_price
            || $tariff->min_weight
            || $tariff->max_weight
        ) {
            return true;
        }

        return false;
    }

    public static function getTariffName(Tariff $tariff): string
    {
        $list = [];
        $list[] = 'Тариф для';
        $list[] = $tariff->carrier_key ? DeliveryHelper::getName($tariff->carrier_key) : 'всех СД';
        $list[] = $tariff->type ? (new OrderDelivery())->getDeliveryTypes()[$tariff->type] : 'всех типов доставок';
        $list[] = $tariff->city ? 'в '. $tariff->city : '';

        $list[] = ':';
        $list[] = (!is_null($tariff->total) && !($tariff->additional_sum_type && $tariff->additional_sum_prefix && $tariff->additional_sum)) ? Yii::$app->formatter->asCurrency($tariff->total, 'RUB') : '';
        if ($tariff->additional_sum_type && $tariff->additional_sum_prefix && $tariff->additional_sum) {
            if ($tariff->additional_sum_type == 'p') {
                $list[] = $tariff->additional_sum_prefix . $tariff->additional_sum . '%';
            }
            if ($tariff->additional_sum_type == 'f') {
                $list[] = $tariff->additional_sum_prefix . Yii::$app->formatter->asCurrency($tariff->additional_sum, 'RUB');
            }
        }


        return implode(' ', $list);
    }

    /**
     * Получение точного тарифа для данного запроса
     * @param array $tariffs
     * @param float $cost
     * @param int $weight
     * @param string $cityFiasId
     * @param string $carrierKey
     * @param string $deliveryMethod
     * @return array
     */
    public static function getCoincidingTariffId(
        array $tariffs,
        float $cost,
        int $weight,
        string $cityFiasId,
        string $carrierKey,
        string $deliveryMethod
    ): array {
        return Yii::$app->cache->getOrSet([
            md5(json_encode($tariffs)),
            $cost,
            $weight,
            $cityFiasId,
            $carrierKey,
            $deliveryMethod
        ], function () use (
            $tariffs,
            $cost,
            $weight,
            $cityFiasId,
            $carrierKey,
            $deliveryMethod
        ) {
            $sortedTariffs = [];
            foreach ($tariffs as $tariff) {
                $counter = 0;

                // Проверка на соответствие цены
                if ((!is_null($tariff['min_price']) || !is_null($tariff['max_price']))) {
                    $minPrice = $tariff['min_price'] ?? 0;
                    $maxPrice = $tariff['max_price'] ?? 999999;

                    if ($cost >= $minPrice && $cost <= $maxPrice) {
                        $counter++;
                    } else {
                        continue;
                    }
                }

                // Проверка на соответствие веса
                if ((!is_null($tariff['min_weight']) || !is_null($tariff['max_weight']))) {
                    $minWeight = $tariff['min_weight'] * 1000 ?? 0;
                    $maxWeight = $tariff['max_weight'] * 1000 ?? 999999;

                    if ($weight >= $minWeight && $weight <= $maxWeight) {
                        $counter++;
                    } else {
                        continue;
                    }
                }

                // Проверка на соответствие Населенного пункта
                $cityTypePosition = mb_stripos($tariff['city'], 'г ');
                $cityName = '';
                if ($cityTypePosition !== false && $cityTypePosition == 0) {
                    $cityName = mb_strtolower(str_replace('г ', '', $tariff['city']));
                }
                if ((!$tariff['city_fias_id'] || $cityFiasId == $tariff['city_fias_id'])
                    || (!$tariff['city_fias_id'] || substr_count (mb_strtolower($tariff['city']), mb_strtolower($cityFiasId)))
                ) {
                    if ($cityFiasId == $tariff['city_fias_id']
                        || $cityFiasId == $tariff['city']
                        || $cityFiasId == $cityName
                    ) $counter++;
                } else {
                    continue;
                }

                // Проверка на СД, если нет типа то значит выбраны все
                if (!$tariff['carrier_key'] || $carrierKey == $tariff['carrier_key']) {
                    if ($carrierKey == $tariff['carrier_key']) $counter++;
                } else {
                    continue;
                }

                // Проверка на тип доставки, если нет типа то значит выбраны все
                if (!$tariff['type'] || $deliveryMethod == $tariff['type']) {
                    if ($deliveryMethod == $tariff['type']) $counter++;
                } else {
                    continue;
                }

                $sortedTariffs[$tariff['id']] = $counter;
            }

            asort($sortedTariffs);
            end($sortedTariffs);
            $tariffId = key($sortedTariffs);

            foreach ($tariffs as $tariff) {
                if ($tariffId == $tariff['id']) {
                    return $tariff;
                }
            }

            return [];

        }, 3600);
    }

    /**
     * Получение цены доставки с учетом персональной тарификации
     * @deprecated
     * @param float $cost
     * @param Order $order
     * @param string $carrierKey
     * @param string $deliveryMethod
     * @return float
     */
    public static function makePersonalTariffCost(
        float $cost,
        Order $order,
        string $carrierKey,
        string $deliveryMethod
    ): float {

        $tariffs = self::getTariff($order->shop_id);

        $exactTariff = self::getCoincidingTariffId(
            $tariffs,
            $order->getCost(false) ?? 0,
            $order->getWeight() ?? 0,
            $order->address->city_fias_id ? $order->address->city_fias_id : $order->address->city,
            $carrierKey,
            $deliveryMethod
        );

        if (empty($exactTariff)) {
            return $cost;
        }

        if ($exactTariff['additional_sum_type']
            && $exactTariff['additional_sum_prefix']
            && $exactTariff['additional_sum']
        ) {
            $additionalSum = ($exactTariff['additional_sum_type'] == Tariff::TARIFF_TYPE_PERCENT)
                ? ($cost * $exactTariff['additional_sum'] / 100)
                : $exactTariff['additional_sum'];

            $newCost = ($exactTariff['additional_sum_prefix'] == Tariff::TARIFF_PREFIX_UP)
                ? ($cost + $additionalSum)
                : ($cost - $additionalSum);

            if ($newCost > 0) {
                return $newCost;
            } else {
                return 0;
            }

        }

        if (!is_null($exactTariff['total'])) {
            return $exactTariff['total'];
        }

        return $cost;
    }

    /**
     * Получение цены доставки с учетом персональной тарификации
     *
     * @param float $cost
     * @param float $orderCost
     * @param int $shopId
     * @param int $weight
     * @param string $cityFiasId
     * @param string $carrierKey
     * @param string $deliveryMethod
     * @return float
     */
    public static function getPersonalTariffCost(
        float $cost,
        float $orderCost,
        int $shopId,
        int $weight,
        string $cityFiasId,
        string $carrierKey,
        string $deliveryMethod
    ): float {

        $tariffs = self::getTariff($shopId);

        $exactTariff = self::getCoincidingTariffId(
            $tariffs,
            $orderCost,
            $weight,
            $cityFiasId,
            $carrierKey,
            $deliveryMethod
        );

        if (empty($exactTariff)) {
            return $cost;
        }

        if ($exactTariff['additional_sum_type']
            && $exactTariff['additional_sum_prefix']
            && $exactTariff['additional_sum']
        ) {
            $additionalSum = ($exactTariff['additional_sum_type'] == Tariff::TARIFF_TYPE_PERCENT)
                ? ($cost * $exactTariff['additional_sum'] / 100)
                : $exactTariff['additional_sum'];

            $newCost = ($exactTariff['additional_sum_prefix'] == Tariff::TARIFF_PREFIX_UP)
                ? ($cost + $additionalSum)
                : ($cost - $additionalSum);

            if ($newCost > 0) {
                return $newCost;
            } else {
                return 0;
            }

        }

        if (!is_null($exactTariff['total'])) {
            return $exactTariff['total'];
        }

        return $cost;
    }

    /**
     * @param float $cost
     * @return float
     */
    public static function getFasteryCharge(float $cost): float
    {
        $charge = $cost * (Yii::$app->params['fasteryCharge'] / 100);
        return ($charge > Yii::$app->params['fasteryMinCharge']) ? $charge : Yii::$app->params['fasteryMinCharge'];
    }
}
